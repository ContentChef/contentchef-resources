swagger: "2.0"
info:
  description: "These are all the api calls to find all the published content in stage and live environment. This API doesn't require any particular authentication."
  version: "1.0.0"
  title: "Content Chef Delivery API"
  contact:
    email: "support@contentchef.io"
host: "api.contentchef.io"
basePath: "/"
tags:
- name: "stage"
  description: "Api for stage environment"
- name: "live"
  description: "Api for live environment"
paths:
  /space/{spaceId}/preview/staging/content/{publishingChannel}:
    get:
      tags:
      - "stage"
      summary: "Get a single published content in the staging enviroment"
      description: "Get a published content with the ability to preview the content on a specified targetDate"
      operationId: "httpGetPreviewStagePublishedContent"
      produces: 
       - "application/json"
      parameters:
      - name: "publishingChannel"
        in: "path"
        required: true
        description: "The channel where the content is published"
        type: "string"
        minLength: 1
        maxLength: 4
      - name: "spaceId"
        in: "path"
        required: true
        description: "The spaceId where the content is published"
        type: "string"
      - name: "publicId"
        in: "query"
        required: true
        description: "PublicId of the desired content"
        type: "string"
        minLength: 1
      - name: "targetDate"
        in: "query"
        description: "Use to retrieve a content in a desired date (iso date format)"
        type: "string"
      - name: "legacyMetaData"
        in: "query"
        description: "Use to retrieve data in the legacy format"
        type: "string"
        enum:
          - "true"
          - "false"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetPublishedContent"
        400:
          description: "application error"
          schema:
            $ref: "#/definitions/400ErrorModel"
        404:
          description: "Not found"
        500:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/500ErrorModel"
  /space/{spaceId}/preview/live/content/{publishingChannel}:
    get:
      tags:
      - "live"
      summary: "Get a published content in a live enviroment"
      description: "Get a published content in a live enviroment with the ability to preview the desired content on a specified date"
      operationId: "httpGetPreviewLivePublishedContent"
      produces: 
       - "application/json"
      parameters:
      - name: "publishingChannel"
        in: "path"
        required: true
        description: "The channel where the content is published"
        type: "string"
        minLength: 1
        maxLength: 4
      - name: "spaceId"
        in: "path"
        required: true
        description: "The spaceId where the content is published"
        type: "string"
      - name: "publicId"
        in: "query"
        required: true
        description: "PublicId of the requested content"
        type: "string"
        minLength: 1
      - name: "targetDate"
        in: "query"
        description: "Use to retrieve a content in a desired date (iso date format)"
        type: "string"
      - name: "legacyMetaData"
        in: "query"
        description: "Use to retrieve data in the legacy format"
        type: "string"
        enum:
          - "true"
          - "false"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetPublishedContent"
        400:
          description: "application error"
          schema:
            $ref: "#/definitions/400ErrorModel"
        404:
          description: "Not found"
        500:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/500ErrorModel"
  /space/{spaceId}/online/content/{publishingChannel}:
    get:
      tags:
      - "live"
      summary: "Get the currently available published content in a live enviroment"
      description: "Get a published content in a live enviroment ignoring targetDate and returning the current available content"
      operationId: "httpGetOnlinePublishedContent"
      produces: 
       - "application/json"
      parameters:
      - name: "publishingChannel"
        in: "path"
        required: true
        description: "The channel where the content is published"
        type: "string"
        minLength: 1
        maxLength: 4
      - name: "spaceId"
        in: "path"
        required: true
        description: "The spaceId where the content is published"
        type: "string"
      - name: "publicId"
        in: "query"
        required: true
        description: "PublicId of the requested content"
        type: "string"
        minLength: 1
      - name: "legacyMetaData"
        in: "query"
        description: "Use to retrieve data in the legacy format"
        type: "string"
        enum:
          - "true"
          - "false"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetPublishedContent"
        400:
          description: "application error"
          schema:
            $ref: "#/definitions/400ErrorModel"
        404:
          description: "Not found"
        500:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/500ErrorModel"
  /space/{spaceId}/preview/live/search/v2/{publishingChannel}:
    get:
      tags:
      - "live"
      summary: "Search published contents in the live enviroment"
      description: "Searches contents in the live enviroment and returns a paginated response (can be used to preview contents in the future)"
      operationId: "paginatedLivePreviewHttpSearchContent"
      produces: 
        - "application/json"
      parameters: 
      - name: "publishingChannel"
        in: "path"
        required: true
        description: "The channel where the content is published"
        type: "string"
        minLength: 1
        maxLength: 4
      - name: "spaceId"
        in: "path"
        required: true
        description: "The spaceId where the content is published"
        type: "string"
      - name: "contentDefinition"
        in: "query"
        description: "Use to retrieve a content of a specific contentDefinition (mnemonicId)"
        type: "array"
        items: 
          type: "string"
          minLength: 1
      - name: "repositories"
        in: "query"
        description: "List of repositories mnemonicIds to use to filter the published contents"
        type: "array"
        items:
          type: "string"
          minLength: 1
      - name: "targedDate"
        in: "query"
        description: "Use to retrieve a content in a desired date (iso date format)"
        type: "string"
      - name: "legacyMetaData"
        in: "query"
        description: "Use to retrieve data in the legacy format"
        type: "string"
        enum:
          - "true"
          - "false"
      - name: "tags"
        in: "query"
        description: "Use to retrieve contents with specific tags (tag1,tag2,...)"
        type: "string"
        minLength: 1
      - name: "publicId"
        in: "query"
        description: "Use to retrieve contents with a specific publicId"
        type: "array"
        items: 
          type: "string"
          minLength: 1
      - name: "skip"
        in: "query"
        description: "Indicates the number of contents to skip for pagination purposes"
        type: "number"
        minimum: 0
        required: true
      - name: "take"
        in: "query"
        description: "Indicates the number of contents to take for pagination purposes"
        type: "number"
        minimum: 1
        maximum: 200
        required: true
      - name: "propFilters"
        in: "query"
        description: "Indicates the filters on indexed fields needed to be applied to published contents (it's a stringified json). Example: \"{\"condition\":\"AND\",\"items\":[{\"operator\":\"EQUALS\",\"field\":\"indexedField\",\"value\":\"indexedValue\"}]}\""
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/PaginatedSearchResponse'
        400:
          description: "application error"
          schema:
            $ref: "#/definitions/400ErrorModel"
        404:
          description: "Not found"
        500:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/500ErrorModel"
  /space/{spaceId}/preview/staging/search/v2/{publishingChannel}:
    get:
      tags:
      - "stage"
      summary: "Search published contents in the staging enviroment"
      description: "Searches contents in the staging enviroment and returns a paginated response (can be used to preview contents in the future)"
      operationId: "paginatedStagePreviewHttpSearchContent"
      produces: 
        - "application/json"
      parameters: 
      - name: "publishingChannel"
        in: "path"
        required: true
        description: "The channel where the content is published"
        type: "string"
        minLength: 1
        maxLength: 4
      - name: "spaceId"
        in: "path"
        required: true
        description: "The spaceId where the content is published"
        type: "string"
      - name: "contentDefinition"
        in: "query"
        description: "Use to retrieve a content of a specific contentDefinition (mnemonicId)"
        type: "array"
        items: 
          type: "string"
          minLength: 1
      - name: "repositories"
        in: "query"
        description: "List of repositories mnemonicIds to use to filter the published contents"
        type: "array"
        items:
          type: "string"
          minLength: 1
      - name: "targedDate"
        in: "query"
        description: "Use to retrieve a content in a desired date (iso date format)"
        type: "string"
      - name: "legacyMetaData"
        in: "query"
        description: "Use to retrieve data in the legacy format"
        type: "string"
        enum:
          - "true"
          - "false"
      - name: "tags"
        in: "query"
        description: "Use to retrieve contents with specific tags (tag1,tag2,...)"
        type: "string"
        minLength: 1
      - name: "publicId"
        in: "query"
        description: "Use to retrieve contents with a specific publicId"
        type: "array"
        items: 
          type: "string"
          minLength: 1
      - name: "skip"
        in: "query"
        description: "Indicates the number of contents to skip for pagination purposes"
        type: "number"
        minimum: 0
        required: true
      - name: "take"
        in: "query"
        description: "Indicates the number of contents to take for pagination purposes"
        type: "number"
        minimum: 1
        maximum: 200
        required: true
      - name: "propFilters"
        in: "query"
        description: "Indicates the filters on indexed fields needed to be applied to published contents (it's a stringified json). Example: \"{\"condition\":\"AND\",\"items\":[{\"operator\":\"EQUALS\",\"field\":\"indexedField\",\"value\":\"indexedValue\"}]}\""
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/PaginatedSearchResponse'
        400:
          description: "application error"
          schema:
            $ref: "#/definitions/400ErrorModel"
        404:
          description: "Not found"
        500:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/500ErrorModel"
  /space/{spaceId}/online/search/v2/{publishingChannel}:
    get:
      tags:
      - "live"
      summary: "Search the currently published contents in the live enviroment"
      description: "Searches contents in the live enviroment and returns a paginated response (cannot be used to preview content using a different `targetDate`)"
      operationId: "paginatedOnlineHttpSearchContent"
      produces: 
        - "application/json"
      parameters: 
      - name: "publishingChannel"
        in: "path"
        required: true
        description: "The channel where the content is published"
        type: "string"
        minLength: 1
        maxLength: 4
      - name: "spaceId"
        in: "path"
        required: true
        description: "The spaceId where the content is published"
        type: "string"
      - name: "contentDefinition"
        in: "query"
        description: "Use to retrieve a content of a specific contentDefinition (mnemonicId)"
        type: "array"
        items: 
          type: "string"
          minLength: 1
      - name: "repositories"
        in: "query"
        description: "List of repositories mnemonicIds to use to filter the published contents"
        type: "array"
        items:
          type: "string"
          minLength: 1
      - name: "legacyMetaData"
        in: "query"
        description: "Use to retrieve data in the legacy format"
        type: "string"
        enum:
          - "true"
          - "false"
      - name: "tags"
        in: "query"
        description: "Use to retrieve contents with specific tags (tag1,tag2,...)"
        type: "string"
        minLength: 1
      - name: "publicId"
        in: "query"
        description: "Use to retrieve contents with a specific publicId"
        type: "array"
        items: 
          type: "string"
          minLength: 1
      - name: "skip"
        in: "query"
        description: "Indicates the number of contents to skip for pagination purposes"
        type: "number"
        minimum: 0
        required: true
      - name: "take"
        in: "query"
        description: "Indicates the number of contents to take for pagination purposes"
        type: "number"
        minimum: 1
        maximum: 200
        required: true
      - name: "propFilters"
        in: "query"
        description: "Indicates the filters on indexed fields needed to be applied to published contents (it's a stringified json). Example: \"{\"condition\":\"AND\",\"items\":[{\"operator\":\"EQUALS\",\"field\":\"indexedField\",\"value\":\"indexedValue\"}]}\""
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/PaginatedSearchResponse'
        400:
          description: "application error"
          schema:
            $ref: "#/definitions/400ErrorModel"
        404:
          description: "Not found"
        500:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/500ErrorModel"
definitions:
  PropFilter:
    type: "object"
    required: 
      - "condition"
      - "items"
    properties:
      condition:
        type: "string"
        enum: ["AND", "OR"]
      items:
          $ref: '#/definitions/IndexedFilters'
  IndexedFilters:
    type: "array"
    items:
        $ref: '#/definitions/IndexedFilter'
  IndexedFilter:
    type: "object"
    required:
      - operator
      - field
      - value
    properties:
      operator:
        type: "string"
        enum: ["EQUALS", "EQUALS_IC", "CONTAINS", "CONTAINS_IC", "IN", "IN_IC", "STARTS_WITH", "STARTS_WITH_IC"]
        description: "Operator to use as filter"
      field:
        type: "string"
        description: "Field's path to use as filter"
      value:
        type: "string"
        description: "Value to use as filter"
  PaginatedSearchResponse:
    type: "object"
    required:
      - "items"
      - "skip"
      - "take"
      - "total"
    properties:
      skip:
        type: "number"
      take:
        type: "number"
      total:
        type: "number"
      items:
        $ref: '#/definitions/GetSearchedPublishedContent'
  GetSearchedPublishedContent:
    type: "array"
    items:
      $ref: '#/definitions/GetPublishedContent'
  GetPublishedContent:
    type: "object"
    required: 
      - "publicId"
      - "definition"
      - "payload"
      - "metadata"
      - "requestContext"
    properties:
      publicId:
        type: "string"
      definition:
        type: "string"
      repository:
        type: "string"
      payload:
        type: "object"
      metadata:
        $ref: '#/definitions/MetadataModel'
      onlineDate:
        type: "string"
      offlineDate:
        type: "string"
      requestContext:
        $ref: '#/definitions/RequestContextModel'
  MetadataModel:
    type: "object"
    required:
      - "id"
      - "authoringContentId"
      - "contentVersion"
      - "contentLastModifiedDate"
      - "tags"
      - "publishedOn"
    properties:
      id:
        type: "number"
      authoringContentId:
        type: "number"
      contentVersion:
        type: "number"
      contentLastModifiedDate:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      publishedOn:
        type: "string"
  RequestContextModel:
    type: "object"
    required:
      - "publishingChannel"
      - "targetDate"
      - "cloudName"
      - "timestamp"
    properties:
      publishingChannel:
        type: "string"
      targetDate:
        type: "string"
      cloudName:
        type: "string"
      timestamp:
        type: "string"
  400ErrorModel:
    type: "object"
    required:
      - "type"
      - "message"
    properties:
      type:
        type: "string"
      message:
        type: "string"
  500ErrorModel:
    required:
      - "message"
    properties:
      message:
        type: "string"
externalDocs:
  description: "Find out more about ContentChef"
  url: "http://www.contentchef.io"